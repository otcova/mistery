
let coords = [
	[
		null,
		201
	],
	[
		155,
		461
	],
	[
		161,
		457
	],
	[
		173,
		452
	],
	[
		172,
		441
	],
	[
		163,
		442
	],
	[
		151,
		451
	],
	[
		144,
		443
	],
	[
		150,
		435
	],
	[
		162,
		432
	],
	[
		157,
		418
	],
	[
		149,
		419
	],
	[
		136,
		428
	],
	[
		127,
		419
	],
	[
		139,
		407
	],
	[
		153,
		405
	],
	[
		142,
		394
	],
	[
		123,
		395
	],
	[
		115,
		386
	],
	[
		133,
		378
	],
	[
		145,
		377
	],
	[
		162,
		371
	],
	[
		168,
		365
	],
	[
		163,
		355
	],
	[
		148,
		362
	],
	[
		135,
		366
	],
	[
		119,
		372
	],
	[
		107,
		370
	],
	[
		113,
		357
	],
	[
		128,
		355
	],
	[
		119,
		348
	],
	[
		105,
		352
	],
	[
		95,
		346
	],
	[
		106,
		334
	],
	[
		123,
		334
	],
	[
		120,
		325
	],
	[
		102,
		319
	],
	[
		91,
		317
	],
	[
		101,
		308
	],
	[
		120,
		309
	],
	[
		109,
		301
	],
	[
		98,
		294
	],
	[
		111,
		290
	],
	[
		126,
		293
	],
	[
		135,
		298
	],
	[
		142,
		299
	],
	[
		140,
		290
	],
	[
		130,
		282
	],
	[
		136,
		272
	],
	[
		149,
		277
	],
	[
		155,
		288
	],
	[
		162,
		285
	],
	[
		168,
		276
	],
	[
		165,
		267
	],
	[
		156,
		258
	],
	[
		135,
		230
	],
	[
		125,
		223
	],
	[
		121,
		213
	],
	[
		114,
		201
	],
	[
		124,
		192
	],
	[
		130,
		203
	],
	[
		139,
		215
	],
	[
		146,
		216
	],
	[
		148,
		210
	],
	[
		140,
		199
	],
	[
		137,
		186
	],
	[
		147,
		183
	],
	[
		156,
		198
	],
	[
		159,
		206
	],
	[
		169,
		212
	],
	[
		179,
		207
	],
	[
		171,
		197
	],
	[
		164,
		182
	],
	[
		172,
		166
	],
	[
		181,
		177
	],
	[
		179,
		189
	],
	[
		188,
		199
	],
	[
		198,
		204
	],
	[
		202,
		192
	],
	[
		195,
		183
	],
	[
		192,
		180
	],
	[
		187,
		163
	],
	[
		189,
		160
	],
	[
		201,
		155
	],
	[
		207,
		165
	],
	[
		212,
		189
	],
	[
		210,
		197
	],
	[
		219,
		197
	],
	[
		218,
		182
	],
	[
		206,
		172
	],
	[
		198,
		166
	],
	[
		207,
		154
	],
	[
		219,
		150
	],
	[
		218,
		164
	],
	[
		225,
		179
	],
	[
		228,
		188
	],
	[
		239,
		182
	],
	[
		244,
		175
	],
	[
		235,
		164
	],
	[
		231,
		156
	],
	[
		237,
		142
	],
	[
		245,
		140
	],
	[
		245,
		157
	],
	[
		256,
		167
	],
	[
		264,
		164
	],
	[
		260,
		152
	],
	[
		254,
		144
	],
	[
		258,
		130
	],
	[
		271,
		128
	],
	[
		281,
		135
	],
	[
		289,
		150
	],
	[
		277,
		158
	],
	[
		269,
		160
	],
	[
		268,
		145
	],
	[
		275,
		140
	],
	[
		279,
		151
	],
	[
		286,
		185
	],
	[
		281,
		196
	],
	[
		272,
		203
	],
	[
		272,
		212
	],
	[
		283,
		210
	],
	[
		290,
		203
	],
	[
		289,
		191
	],
	[
		301,
		182
	],
	[
		302,
		195
	],
	[
		294,
		201
	],
	[
		304,
		200
	],
	[
		312,
		190
	],
	[
		319,
		186
	],
	[
		324,
		200
	],
	[
		331,
		206
	],
	[
		339,
		200
	],
	[
		334,
		192
	],
	[
		316,
		198
	],
	[
		303,
		205
	],
	[
		293,
		215
	],
	[
		283,
		220
	],
	[
		282,
		225
	],
	[
		298,
		223
	],
	[
		295,
		232
	],
	[
		288,
		226
	],
	[
		288,
		235
	],
	[
		301,
		234
	],
	[
		306,
		238
	],
	[
		299,
		248
	],
	[
		307,
		250
	],
	[
		314,
		241
	],
	[
		317,
		250
	],
	[
		308,
		261
	],
	[
		309,
		261
	],
	[
		320,
		257
	],
	[
		330,
		248
	],
	[
		334,
		242
	],
	[
		344,
		241
	],
	[
		350,
		236
	],
	[
		355,
		227
	],
	[
		350,
		221
	],
	[
		352,
		210
	],
	[
		343,
		202
	],
	[
		337,
		192
	],
	[
		350,
		193
	],
	[
		360,
		197
	],
	[
		362,
		203
	],
	[
		355,
		211
	],
	[
		360,
		223
	],
	[
		355,
		239
	],
	[
		349,
		247
	],
	[
		355,
		258
	],
	[
		342,
		257
	],
	[
		337,
		250
	],
	[
		324,
		259
	],
	[
		315,
		266
	],
	[
		322,
		269
	],
	[
		337,
		263
	],
	[
		350,
		266
	],
	[
		354,
		270
	],
	[
		338,
		280
	],
	[
		325,
		274
	],
	[
		318,
		281
	],
	[
		328,
		284
	],
	[
		337,
		270
	],
	[
		348,
		280
	],
	[
		353,
		287
	],
	[
		339,
		294
	],
	[
		331,
		297
	],
	[
		328,
		293
	],
	[
		343,
		291
	],
	[
		350,
		296
	],
	[
		358,
		298
	],
	[
		357,
		308
	],
	[
		340,
		308
	],
	[
		347,
		300
	],
	[
		338,
		312
	],
	[
		356,
		310
	],
	[
		365,
		309
	],
	[
		361,
		319
	],
	[
		349,
		316
	],
	[
		341,
		320
	],
	[
		353,
		323
	],
	[
		365,
		322
	],
	[
		370,
		325
	],
	[
		357,
		333
	],
	[
		350,
		329
	],
	[
		342,
		335
	],
	[
		346,
		341
	],
	[
		304,
		369
	],
	[
		298,
		376
	],
	[
		288,
		384
	],
	[
		280,
		389
	],
	[
		268,
		392
	],
	[
		256,
		396
	],
	[
		259,
		384
	],
	[
		274,
		377
	],
	[
		290,
		370
	],
	[
		296,
		364
	],
	[
		289,
		361
	],
	[
		274,
		365
	],
	[
		263,
		372
	],
	[
		255,
		374
	],
	[
		252,
		367
	],
	[
		259,
		358
	],
	[
		269,
		355
	],
	[
		279,
		354
	],
	[
		285,
		350
	],
	[
		281,
		340
	],
	[
		275,
		340
	],
	[
		261,
		344
	],
	[
		254,
		349
	],
	[
		250,
		346
	],
	[
		250,
		338
	],
	[
		259,
		330
	],
	[
		270,
		327
	],
	[
		273,
		325
	],
	[
		269,
		313
	],
	[
		263,
		311
	],
	[
		254,
		319
	],
	[
		248,
		324
	],
	[
		242,
		320
	],
	[
		237,
		311
	],
	[
		245,
		299
	],
	[
		257,
		296
	],
	[
		262,
		293
	],
	[
		263,
		281
	],
	[
		254,
		281
	],
	[
		245,
		295
	],
	[
		249,
		305
	],
	[
		260,
		304
	],
	[
		265,
		299
	],
	[
		239,
		296
	],
	[
		237,
		295
	],
	[
		230,
		297
	],
	[
		229,
		288
	],
	[
		228,
		278
	],
	[
		222,
		270
	],
	[
		231,
		264
	],
	[
		236,
		276
	],
	[
		245,
		284
	],
	[
		248,
		275
	],
	[
		250,
		269
	],
	[
		254,
		259
	],
	[
		248,
		249
	],
	[
		240,
		266
	],
	[
		232,
		264
	],
	[
		223,
		261
	],
	[
		215,
		260
	],
	[
		233,
		255
	],
	[
		241,
		254
	],
	[
		243,
		231
	],
	[
		231,
		236
	],
	[
		244,
		243
	],
	[
		229,
		243
	],
	[
		224,
		254
	],
	[
		215,
		258
	],
	[
		207,
		253
	],
	[
		207,
		242
	],
	[
		219,
		239
	],
	[
		223,
		227
	],
	[
		230,
		220
	],
	[
		236,
		217
	],
	[
		235,
		206
	],
	[
		222,
		214
	],
	[
		211,
		223
	],
	[
		203,
		225
	],
	[
		201,
		212
	],
	[
		211,
		206
	],
	[
		222,
		203
	],
	[
		231,
		195
	]
];


let t = 0;
let epicycles;

let record = []



function setup() {
	createCanvas(600, 600)

	let temp = []
	for (const coord of coords) {
		if (Number.isNaN(coord[0]) ||!(coord[0] > 0)) continue
		temp.push([coord[0] - 250, coord[1] - 320])
	}
	coords = temp
	// for (let x = -300; x < 300; ++x) {
	// 	coords.push([x, abs(x) % 300 < 150 ? -100 : 100])
	// }


	epicycles = dft(coords)
	
	let file = "delta time = 1\n\nmovement,center coordinates,frequency,phase,radius\n"
	let center = "origin"
	for (const cycle of epicycles) {
		file += "circular," + center + "," + cycle.frequency + "," + cycle.phase + "," + cycle.radius + "\n"
		center = "previous"
	}
	console.log(file.substring(0, file.length-2))
}




function draw() {
	background(40)
	stroke(100);
	translate(300, 300)
	// scale(2, -2)

	
	for (let n = 0; n < 10; ++n) {
		let pastPos = [0, 0]
	//
		for (let i = 0; i < epicycles.length; ++i) {
			const epicycle = epicycles[i]

			const freq = epicycle.frequency
			const radius = epicycle.radius
			const phase = epicycle.phase + PI / 2

			const x = pastPos[0] + radius * cos(freq * t + phase)
			const y = pastPos[1] + radius * sin(freq * t + phase)

			noFill();
			ellipse(pastPos[0], pastPos[1], radius * 2)
			fill(255);
			ellipse(x, y, 10)
			pastPos = [x, y]

		}
		record.push(pastPos)
		t += 1
	}
	
	for (const coord of record) {
		ellipse(coord[0], coord[1], 5)
	}

}

function dft(coords) {
	let epicycles = []

	const totalT = coords.length;
	let groundFreq = 2 * Math.PI / totalT;

	for (let k = 0; k < totalT; ++k) {

		let real = 0;
		let imag = 0;

		for (let t = 0; t < totalT; ++t) {
			const angle = k * t * groundFreq
			const [r, i] = complex.multiply([coords[t][1], -coords[t][0]], [cos(angle), -sin(angle)])
			real += r
			imag += i
		}
		real *= 1 / totalT
		imag *= 1 / totalT

		epicycles[k] = {
			frequency: k * groundFreq,
			radius: sqrt(real * real + imag * imag),
			phase: atan2(imag, real),
		}
	}

	epicycles.sort((a, b) => {
		if (a.radius > b.radius) return -1;
		if (a.radius < b.radius) return 1;
		return 0;
	})

	return epicycles
}

const complex = {
	add: (a, b) => [a[0] + b[0], a[1] + b[1]],
	subtract: (a, b) => [a[0] - b[0], a[1] - b[1]],
	multiply: (a, b) => [a[0] * b[0] - a[1] * b[1], a[0] * b[1] + a[1] * b[0]],
	magnitude: (v) => Math.sqrt(c[0] * c[0] + c[1] * c[1]),
}
